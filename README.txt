Данное ASP.NET Core MVC приложение реализует торговый автомат с напитками. Приложение использует PostgreSQL в качестве базы данных и следует принципу Code First с применением Entity Framework Core. База данных разворачивается в Docker-контейнере с помощью Docker Compose.
Основной функционал:
Каталог напитков с возможностью выбора доступных товаров.
Страница оформления заказа с отображением выбранных товаров.
Страница оплаты, где пользователь вносит монеты и производит оплату.
Логика сдачи и проверка наличия достаточного количества монет в автомате.
Блокировка кнопки "Выбрать" при отсутствии напитка в наличии.
Сохранение состояния корзины через сессии.


Дополнительные условия реализованы не были.
Не был реализован административный интерфейс.


Изменения:
- Были созданы репозитории. Репозитории работают с DbContext напрямую. Каждый репозиторий отвечает за доступ к данным конкретной сущности;

- Для инкапсуляции бизнес-логики были созданы сервисы. Они вызывают необходимые методы репозиториев;

- Контроллеры теперь не знают о DbContext и не содержат бизнес-логики. Теперь контроллеры вызывают нужные методы сервиса и принимают данные;

- Применил принцип внедрения зависимостей (DI), при таком подходе, можно сказать, что достигается инверсия управления между классами и их зависимостями. Контроллеры получают сервисы через конструктор, сервисы получают репозитории через конструктор;

- Все зависимости регистрируются в Program.cs через builder.Services.AddScoped<>(). AddScoped означает, что службы создаются один раз для каждого запроса клиента;

- Старый класс Cart с логикой и доступом к контексту был переделан в сервис CartService;

- Изменен фильтр цены: теперь это не два поля, а ползунок, который фильтрует товары от минимальной цены, например, выбрав 200р будут отфильтрованы все напитки, чья цена ниже указанной;

- Проект больше не крашится при отсутствии данных в таблицах;

- Добавил точную инструкцию запуска проекта;


Как запустить проект в первый раз:
1. Установить docker и docker compose
2. Выполнить docker-compose up -d
3. Выполнить dotnet ef database update // после этого в БД должны появиться пустые таблицы сущностей, можно попробовать запустить проект (выполнить dotnet run) и убедиться, что он не крашится
4. В Program.cs раскомментировать вызов инициализации "DbInitializer" (строчки 54-68), сохранить файл
5. Выполнить dotnet run
6. После заполнения БД тестовыми данными, в Program.cs можно снова закомментировать вызов инициализации "DbInitializer" (строчки 54-68), сохранить файл.
7. Перейти в браузере по адресу http://localhost:{port}


Активные адреса:
/drinks - Страница со списком напитков (реализовал базовые CRUD методы, но без админки.)
/catalog - Страница с каталогом напитков
/cart - Страница с корзиной
/payment - Страница оплаты




